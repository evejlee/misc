# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cnumpydb', [dirname(__file__)])
        except ImportError:
            import _cnumpydb
            return _cnumpydb
        if fp is not None:
            try:
                _mod = imp.load_module('_cnumpydb', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cnumpydb = swig_import_helper()
    del swig_import_helper
else:
    import _cnumpydb
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


NUMPYDB_EQ = _cnumpydb.NUMPYDB_EQ
NUMPYDB_GE = _cnumpydb.NUMPYDB_GE
NUMPYDB_GT = _cnumpydb.NUMPYDB_GT
NUMPYDB_GE_LE = _cnumpydb.NUMPYDB_GE_LE
NUMPYDB_GE_LT = _cnumpydb.NUMPYDB_GE_LT
NUMPYDB_GT_LE = _cnumpydb.NUMPYDB_GT_LE
NUMPYDB_GT_LT = _cnumpydb.NUMPYDB_GT_LT
NUMPYDB_LE = _cnumpydb.NUMPYDB_LE
NUMPYDB_LT = _cnumpydb.NUMPYDB_LT
NUMPYDB_GETDATA = _cnumpydb.NUMPYDB_GETDATA
NUMPYDB_GETKEYS = _cnumpydb.NUMPYDB_GETKEYS
NUMPYDB_GETBOTH = _cnumpydb.NUMPYDB_GETBOTH
NUMPYDB_GETCOUNT = _cnumpydb.NUMPYDB_GETCOUNT
class NumpyDB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumpyDB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NumpyDB, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cnumpydb.new_NumpyDB(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cnumpydb.delete_NumpyDB
    __del__ = lambda self : None;
    def open(self, *args): return _cnumpydb.NumpyDB_open(self, *args)
    def create(self, *args): return _cnumpydb.NumpyDB_create(self, *args)
    def close(self): return _cnumpydb.NumpyDB_close(self)
    def set_cachesize(self, *args): return _cnumpydb.NumpyDB_set_cachesize(self, *args)
    def put(self, *args): return _cnumpydb.NumpyDB_put(self, *args)
    def between(self, *args): return _cnumpydb.NumpyDB_between(self, *args)
    def range_generic(self, *args): return _cnumpydb.NumpyDB_range_generic(self, *args)
    def match(self, *args): return _cnumpydb.NumpyDB_match(self, *args)
    def print_nrecords(self, *args): return _cnumpydb.NumpyDB_print_nrecords(self, *args)
    def file_name(self): return _cnumpydb.NumpyDB_file_name(self)
    def key_dtype(self): return _cnumpydb.NumpyDB_key_dtype(self)
    def data_dtype(self): return _cnumpydb.NumpyDB_data_dtype(self)
    def set_verbosity(self, *args): return _cnumpydb.NumpyDB_set_verbosity(self, *args)
    def print_info(self): return _cnumpydb.NumpyDB_print_info(self)
    def test(self, *args): return _cnumpydb.NumpyDB_test(self, *args)
NumpyDB_swigregister = _cnumpydb.NumpyDB_swigregister
NumpyDB_swigregister(NumpyDB)



