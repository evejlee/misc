// This header was auto-generated by make-stack
#ifndef _STACK_H
#define _STACK_H

#include <stdint.h>

struct i64stack {
    size_t size;            // number of elements that are visible to the user
    size_t allocated_size;  // number of allocated elements in data vector
    double realloc_mult;    // when pushing, reallocate to allocated_size*realloc_mult, default 1.5
                            // if size is zero, we allocate to 100
    int64_t* data;
};

struct i64stack* i64stack_new(size_t num);

// if size > allocated size, then a reallocation occurs
// if size <= internal size, then only the ->size field is reset
// use i64stack_realloc() to reallocate the data vector and set the ->size
void i64stack_resize(struct i64stack* plist, size_t newsize);

// perform reallocation on the underlying data vector. This does
// not change the size field unless the new size is smaller
// than the viewed size
void i64stack_realloc(struct i64stack* plist, size_t newsize);

// completely clears memory in the data vector
void i64stack_clear(struct i64stack* plist);

// clears all memory and sets pointer to NULL
void i64stack_delete(struct i64stack* listpix);

// if reallocation is needed, size is increased by 50 percent
// unless size is zero, when it 100 are allocated
void i64stack_push(struct i64stack* plist, int64_t pixnum);
// pop the last element and decrement size; no reallocation is performed
// if empty, INT64_MIN is returned
int64_t i64stack_pop(struct i64stack* plist);
#endif
