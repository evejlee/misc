vector

Description
-----------

A simple vector.  Vectors are fixed size at creation.  If you need a dynamic
data structure, use the stack; it is just as efficient as a vector but supports
push/pop/resizing etc.

These types are supported:

        typename   shortname
        float32    f32
        float64    f64
        int8       i8
        uint8      u8
        int16      i16
        uint16     u16
        int32      i32
        uint32     u32
        int64      i64
        uint64     u64
        char       char
        uchar      uchar

The short names are used in the names of the stack structures and their
associated methods, e.g. i64stack, f64stack, for structs and i32stack_push(),
f64stack_pop() etc for methods.  float32 and float64 are type aliases
for float and double, defined in vector.h

Usage examples for an int64 vector; for other types, just replace "i64"
with the right short name:

    #include "vector.h"
    // get a new int64 vector with size initsize
    struct i64vector* vec= i64vector_new(initsize);

    // fill array
    for (size_t i=0; i<10; i++) {
        vec->data[i] = (int64_t) i;
    }

    // print values
    for (size_t i=0; i<vec->size; i++) {
        printf("v[%ld]\n", i, vec->data[i]);
    }

    // clean up
    i64vector_delete(stack);


Generating the Code
-------------------

In order to avoid duplicating code, the code is auto-generated using a script.
To generate vector code for int64 and float64, run the python program make-types

    ./make-types int64 float64

This generates the files

    vector.h
    vector.c

which you can copy into your own source tree.  Test programs are also generated
with names test-{type}type.c.  To build the tests, run the python fabricate
script

    ./build-tests

And to execute use

    ./test-{type}vector
