#!/bin/bash

function usage {
    echo "
    usage: incsub [-h -q queue -n maxjobs] file_list

        -n to specify the max number of allowed jobs in any queue. 
              default is 50.
        -q Send the job to the specified queue and only monitor jobs in that 
           queue.  The -n parameter will then refer to jobs in this queue only.
        
        -h for this help message

    Incrementally submit pbs jobs from the input file list, maintaining at most
    the specified number of jobs in the queues.  Will wait 30 seconds between
    job checks

    If the filename with .pbs replaced with .out exists, the job is not
    submitted.  Remove .out files to get jobs to run.  Note the assumption
    that the files end with .pbs
"
}

function count_jobs {
    name=$1
    queue=$2

    # need to awk the name field to get rid of the header
    if [[ "$queue" == "any" ]]; then
        awk_script="{if (\$2 == \"$name\" && (\$10 == \"Q\" || \$10 == \"R\")) print \$0}"
        njob=$(qstat -u "$name" | awk "$awk_script" | wc -l)
    else
        awk_script="{if (\$3 == \"$queue\" && \$2 == \"$name\" && (\$10 == \"Q\" || \$10 == \"R\")) print \$0}"
        #awk_script="{if (\$2 == \"$name\" && \$3 == \"$queue\") print \$0}"
        njob=$(qstat -u "$name" | awk "$awk_script" | wc -l)
    fi
    echo "$njob"
}

name=`whoami`

# number of jobs running at once
queue="any"
maxjobs=50
while getopts "hn:q:" Option; do
    case $Option in
        n) maxjobs=$OPTARG ;;
        q) queue=$OPTARG ;;
        h) usage
           exit 45 ;;
        [?]) usage
             exit 45 ;;
    esac
done
shift $(($OPTIND - 1))

if [ $# -lt 1 ]; then
    usage
    exit 45
fi

if [[ "$queue" != "any" ]]; then
    echo "queue:                    $queue"
fi
echo "submitting jobs for user: $name"
echo "number in list: $#"
echo "will limit to maxjobs:    $maxjobs"

for file; do
    logf=$(echo $file | sed 's/\.pbs/\.out/')
    if [ ! -e "$logf" ]; then

        njob=$(count_jobs $name $queue)
        #echo "njobs: $njob"
        #exit
        while [[ "$njob" -ge "$maxjobs" ]]; do
            sleep 30
            njob=$(count_jobs $name $queue)
        done

        dt=`date +"%T"`
        if [[ "$queue" == "any" ]]; then
            echo -n "Found $njob jobs, submitting $file ($dt) "
            qsub $file
        else
            echo -n "Found $njob jobs, submitting $file to queue $queue ($dt) "
            qsub -q $queue $file
        fi

    fi
done
