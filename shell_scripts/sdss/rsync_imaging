#!/bin/sh

###########################################################################
# rsync_imaging
#
# Connect to the SDSS rsync server (collaboration) and dowload the 
# specified run.  Default is to get the calibChunks directory. Flags can
# be set to retrieve astrom and objcs.
#
###########################################################################

WRONG_ARGS=65
dargs=3
if [ $# -lt $dargs ]
then
    echo "Syntax: `basename $0` -oacl run rerun disk"
    echo " Gets tsObj/tsField files from calibChunks directory for input run/rerun"
    echo " Must be run on the cheops machine its copying to"
    echo " disk=The name of the local disk.  \"data0\" or \"data1\", etc"
    echo "   assumes /net/\$host/\$disk/..."
    echo
    echo " -o: get files from objcs directory (not fpBIN,fpObjc)"
    echo " -a: get astrom directory"
    echo " -c: get the calibChunks directory. This is the default"
    echo " -l: copy to imaging.linked directory instead of imaging.local"
    exit $WRONG_ARGS
fi

echo
echo "-------------------------------------------------"

#########################################################################
# defaults
#########################################################################

#
# local directories
#
# The location of the imaging directory
#
imagingDir="imaging.local"

# Type of subdirectory to get
subDir="calibChunks"

# remote directory on host: same as local
remoteSubDir="calibChunks"

# what files to get? Default is all in directory.
regexpArgs=""

#########################################################################
# check options to override these defaults
#########################################################################

while getopts "oacl" Option
do
  case $Option in
      o) # get objcs
	  echo
	  echo Getting objcs
	  subDir="objcs"
	  remoteSubDir="objcs"

	  # cannot have quotes around the patterns when used in
	  # a variable like this
	  regexpArgs="--exclude=fpBIN* --exclude=fpObjc* --exclude=psBB*"
	  ;;
      a) # get asTrans File
	  echo
	  echo getting astrom
	  subDir="astrom"
	  remoteSubDir="astrom"
	  ;;
      c) ;; # this is the default
      l) imagingDir="imaging.linked";;
      *) exit $WRONG_ARGS;;
  esac
done

# Decrements the argument pointer so it points to next argument.
shift $(($OPTIND - 1))

#########################################################################
# The arguments: run/rerun/disk
#########################################################################

run=$1
rerun=$2
disk=$3

#########################################################################
#where we store the data locally
#########################################################################

hname=`hostname`
hname=`echo $hname | sed "s/\..*//g"` #only first part of name
dataDir="/net/${hname}/${disk}/${imagingDir}"
runDir=${dataDir}/${run}
rerunDir=${runDir}/${rerun}

localDir="$dataDir/$run/$rerun/$subDir"

#########################################################################
# check local dir
# create directories if needed
#########################################################################


echo "cd $dataDir"
cd $dataDir

if [ ! -d $runDir ]
then
    echo Run $run directory does not exist. Creating
    echo "newrun $run $rerun"
    newrun $run $rerun
fi

echo "cd $runDir"
cd $runDir

if [ ! -d $rerunDir ]
then
    echo rerun $rerun directory does not exist. Creating
    echo "newrerun $rerun"
    newrerun $rerun
fi

echo "cd $localDir"
cd $localDir

# did directory switch work?
test=$?
if [ $test -ne 0 ] 
then
    exit $test
fi

########################################################
# call rsync with appropriate arguments
########################################################

#host, etc.
host="rsync://sdss@rsync.sdss.org"

# new remote dir
remoteDir="data/$run/$rerun/$remoteSubDir"

pFile="${HOME}/.pfile"

# -a perserve everything, recursive, etc.
# -v verbose
# -L copy contents of symbolic links

echo
echo "rsync -avL --password-file=$pFile $regexpArgs ${host}/${remoteDir}/ ."
echo
echo "-------------------------------------------------"
echo
echo
rsync -avL --password-file=$pFile $regexpArgs ${host}/${remoteDir}/ .

exit
