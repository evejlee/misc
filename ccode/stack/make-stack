#!/usr/bin/env python
'''
    make-stack typelist

Description

    Generate stack.h and stack.c for the input type list.  The type list
    should be comma separated, e.g. 

        float,double,int64

    Available types:
        float
        double
        int16
        uint16
        int32
        uint32
        int64
        uint64
        char
        uchar

'''

import sys

typemap={'float'  : {'ctype':'float','shortname':'f'},
         'double' : {'ctype':'double','shortname':'d'},
         'int16'  : {'ctype':'int16_t','shortname':'i16'},
         'uint16' : {'ctype':'uint16_t','shortname':'u16'},
         'int32'  : {'ctype':'int32_t','shortname':'i32'},
         'uint32' : {'ctype':'uint32_t','shortname':'u32'},
         'int64'  : {'ctype':'int64_t','shortname':'i64'},
         'uint64' : {'ctype':'uint64_t','shortname':'u64'},
         'char'   : {'ctype':'char','shortname':'c'} }

hformat='''
struct %(shortname)sstack {
    size_t size;            // number of elements that are visible to the user
    size_t allocated_size;  // number of allocated elements in data vector
    double realloc_mult;    // when pushing, reallocate to allocated_size*realloc_mult, default 1.5
                            // if size is zero, we allocate to 100
    %(type)s* data;
};

struct %(shortname)sstack* %(shortname)sstack_new(size_t num);

// if size > allocated size, then a reallocation occurs
// if size <= internal size, then only the ->size field is reset
// use %(shortname)sstack_realloc() to reallocate the data vector and set the ->size
void %(shortname)sstack_resize(struct %(shortname)sstack* plist, size_t newsize);

// perform reallocation on the underlying data vector. This does
// not change the size field unless the new size is smaller
// than the viewed size
void %(shortname)sstack_realloc(struct %(shortname)sstack* plist, size_t newsize);

// completely clears memory in the data vector
void %(shortname)sstack_clear(struct %(shortname)sstack* plist);

// clears all memory and sets pointer to NULL
void %(shortname)sstack_delete(struct %(shortname)sstack* listpix);

// if reallocation is needed, size is increased by 50 percent
// unless size is zero, when it 100 are allocated
void %(shortname)sstack_push(struct %(shortname)sstack* plist, %(type)s pixnum);
// pop the last element and decrement size; no reallocation is performed
// if empty, INT64_MIN is returned
%(type)s %(shortname)sstack_pop(struct %(shortname)sstack* plist);
'''

def generate_h(types):
    fobj=open('stack.h','w')
    head="""// This header was auto-generated by make-stack
#ifndef _STACK_H
#define _STACK_H

#include <stdint.h>
"""
    fobj.write(head)

    for type in types:
        if type not in typemap:
            raise ValueError("type not supported: %s" % type)
        text = hformat % {'type':typemap[type]['ctype'],
                          'shortname':typemap[type]['shortname']}
        fobj.write(text)

    fobj.write('\n#endif  // header guard\n')
    fobj.close()


def main():
    if len(sys.argv) < 2:
        sys.stdout.write(__doc__)
        sys.exit(45)

    types = sys.argv[1].split(',')

    generate_h(types)
    #generate_c(types)

if __name__=="__main__":
    main()
